package sbnz.integracija;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import sbnz.integracija.siem_center.facts.Log;
import sbnz.integracija.siem_center.facts.Alarm;
import sbnz.integracija.siem_center.facts.Machine;
import sbnz.integracija.siem_center.facts.Risk;
import sbnz.integracija.siem_center.facts.MaliciousIps;
import sbnz.integracija.siem_center.facts.AlarmType;
import sbnz.integracija.siem_center.facts.LogStatus;
import sbnz.integracija.siem_center.facts.LogType;
import sbnz.integracija.siem_center.facts.User;

rule "Login error on same machine"
	when
		$machine: Machine();
		Number( intValue >=2 ) from accumulate (
			Log(type.equals(LogType.Login), 
			status.equals(LogStatus.Error), 
			machine.getIp().equals($machine.getIp())),
			init(int count = 0;),
			action(count = count +1;),
			reverse(count = count-1;),
			result(count)
		)
	then
		System.out.println("ALARM: Login error on same machine!");
		insert(new Alarm(AlarmType.Regular, null, $machine, LocalDateTime.now()));
end

rule "Login error with same username"
	when 
		$user: User();
		Number (intValue >=2 ) from accumulate(
			Log (type.equals(LogType.Login),
			status.equals(LogStatus.Error),
			user.getUsername().equals($user.getUsername())),
			init(int count = 0;),
			action(count = count+1;),
			reverse(count = count-1;),
			result(count)
		)
	then 
		System.out.println("ALARM: Login error with same username!");
		insert(new Alarm(AlarmType.Regular, $user, null, LocalDateTime.now()));
end

rule "Error log"
	when
		$l: Log(status.equals(LogStatus.Error))
	then
		System.out.println("ALARM: Error log!");
		insert(new Alarm(AlarmType.Regular, $l.getUser(), $l.getMachine(), $l.getTime()));
end

rule "90 days inactive login attempt"
	when 
		$log: Log(type.equals(LogType.Login), user.getLastActivity().isBefore(LocalDateTime.now().minusDays(90)));
	then
		System.out.println("ALARM: 90 days inactive user login attempt!");
		insert(new Alarm(AlarmType.Regular, $log.getUser(), $log.getMachine(), $log.getTime()));
end


rule "15 login errors from same IP address in the last 5 days"
	when
		$machine: Machine();
		$count: Number( intValue >=15 ) from accumulate (
			Log(type.equals(LogType.Login), 
			status.equals(LogStatus.Error), 
			time.isAfter(LocalDateTime.now().minusDays(5)),
			machine.getIp().equals($machine.getIp())),
			init(int count = 0;),
			action(count = count +1;),
			reverse(count = count-1;),
			result(count)
		)
    then
		System.out.println("ALARM: " +$count+" login errors from same IP address in the last 5 days!");
		insert(new Alarm(AlarmType.Regular, null, $machine, LocalDateTime.now()));
end

rule "User logged in from two different IP addresses in less then 10 seconds"
	when
		$user: User()
		exists (Log(status.equals(LogStatus.Ok), 
					type.equals(LogType.Login), 
					user.getUsername().equals($user.getUsername()),
					$ip:machine.getIp(), 
					$time:time) 
				and
				Log(status.equals(LogStatus.Ok), 
					type.equals(LogType.Login), 
					user.getUsername().equals($user.getUsername()),
					!machine.getIp().equals($ip),
					Math.abs(time.getSecond()-$time.getSecond())<=10)
				)
	then
		System.out.println("ALARM: User logged in from two different IP addresses in less then 10 seconds!");
		insert(new Alarm(AlarmType.Regular, $user, null, LocalDateTime.now()));
end

rule "Alarm"
	when
		$a: Alarm()
	then
		System.out.println("Alarm: " + $a);
end
/*
rule "Antivirus threat not eliminated within hour"
	when
		$machine: Machine()
		threatCount: Number() from accumulate (
			Log(type.equals(LogType.VirusThreat),
				time.isAfter(LocalDateTime.now().minusHour(1)),
				machine.getIp().equals($machine.getIp())	
			)
			init(int count = 0;),
			action(count= count+1;),
			reverse(count = count -1;),
			result(count)
		)
		threatsRemoved: Number(intValue == threatCount) from accumulate (
			Log(type.equals(LogType.ThreatEliminated),
				$time.isBefore(LocalDateTime.now().minusHour(1))
				machine.getIp().equals($machine.getIp())	
			)
			init(int count = 0;),
			action(count= count+1;),
			reverse(count = count -1;),
			result(count)
		)
		
	then
		
end
*/

//testiraj
rule "Seven or more threats from the same machine"
	when
		$machine: Machine()
		$count: Number( intValue >=7) from accumulate (
			Log(type.equals(LogType.VirusThreat), 
				machine.getIp().equals($machine.getIp())),
			over window: time(10d),
			init(int count = 0;),
			action(count=count+1;),
			reverse(count=count-1;),
			result(count)
		)
	then
		System.out.println("ALARM: "+$count+" threats from ip address: "+$machine.getIp()+"!");
		insert(new Alarm(AlarmType.Regular, $log.getUser(), $log.getMachine(), LocalDateTime.now()));
end
	
rule "Malicious ip login attempt (or success)"
	when
		$log: Log(type.equals(LogType.Login), 
		status.equals(LogStatus.Ok) || status.equals(LogStatus.Error),
		machine.isMaliciousIp())
	then
		System.out.println("ALARM: Malicious ip login attempt (or success): "+$log.getMacine().getIp()+"!");
		insert(new Alarm(AlarmType.Regular, $log.getUser(), $log.getMachine(), LocalDateTime.now()));
end

rule "Log from malicious machine"
	when
		$log: Log(machine.isMaliciousIp())
	then
		System.out.println("ALARM: Log from malicious ip: "+$log.getMacine().getIp()+"!");
		insert(new Alarm(AlarmType.Regular, $log.getUser(), $log.getMachine(), LocalDateTime.now()));
end

/*

rule "Malicious ip login attempt"
	when
		$mals: MaliciousIps() 
		$log: Log(type == "Login", machine.ip memberOf $mals)
	then
		System.out.println("Malicious ip login attempt!" + $log);
		insert(new Alarm($log.getType(), $log.getUser(), $log.getMachine(), $log.getTime()));
end

rule "Payment system attack"
	when
		$now: LocalDateTime()
		$logList : ArrayList(size > 50) from collect ( Log (time.isAfter($now.minusMinutes(1))))
	then
    	boolean isAttack = false;
    	int counter = 0;
    	for (Object el:$logList) {
    		Log log = (Log)el;
    		if (log.getType().equals("payment") {
    			counter = counter + 1;
    			if (counter > 50){
    				isAttack = true;
    				break;
    			}
    		}
    	}
    	if (isTypePayment) {
    		System.out.println("Payment system is attacked!");
        	insert(new Alarm("payment", null, null, null));
    	}
end

rule "Login error for malicious ip"
	when 
		$maliciousIps: MaliciousIps()
		$log: Log($maliciousIps.getIps().contains(machine.ip))
	then
		System.out.println("log with malicious ip"+log);
		insert(new Alarm("malicious", null, $log.getMachine(), log.getTime()));
end		
    	
rule "More than 6 threats registered for the same machine in last 10 days"
	when 
		$logList: ArrayList(size > 6) from collect (
            Log(Log.time.isAfter(LocalDateTime.now().minusDays(10)), type == "AntivirusReport", status == LogStatus.VirusThreat))
	then
		int sameIp;
    	String ip = "";
    	for (Object obj : &logList ){
    		sameIp  = 0;
    		Log log = (Log)obj;
    		ip = log.getMachine().getIp();
    		for (Object obj : &logList ){
	    		Log log2 = (Log)obj;
	    		if(ip.equals(log2.getMachine().getIp())){
	    			sameIp++;
	    		}
	    	}
	    	sameIp--;
	    	if(sameIp >= 7){
		    	System.out.println("More than 6 threats registered in the last 10 days on the same ip address "+
		    		log);
				insert(new Alarm(log.getType(), null, log.getMachine(), log.getTime()));
				break;
			}    	
 end
*/