package sbnz.integracija;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import sbnz.integracija.siem_center.facts.Log;
import sbnz.integracija.siem_center.facts.Alarm;
import sbnz.integracija.siem_center.facts.Machine;
import sbnz.integracija.siem_center.facts.Risk;
import sbnz.integracija.siem_center.facts.AlarmType;
import sbnz.integracija.siem_center.facts.LogStatus;
import sbnz.integracija.siem_center.facts.LogType;
import sbnz.integracija.siem_center.facts.User;
import sbnz.integracija.siem_center.facts.InformationSystem;
import sbnz.integracija.siem_center.SiemCenterService;


global SiemCenterService service;

//low risk
rule "Detecting low risk users"
	when
		$user: User( !risk.equals(Risk.Low))
		not ( 
			Alarm(
				user.getId()== $user.getId(), 
				time.isAfter(LocalDateTime.now().minusDays(90))
			) 
		)
	then
			System.out.println("User "+$user.getUsername()+"'s risk has been set to Low");
			modify ($user) { setRisk (Risk.Low)};
			service.setUserRisk($user);
end

//moderate risk
rule "Detecting moderate risk users - antivirus"
	when 
		$user: User(risk.equals(Risk.Low))
		exists (
			Alarm (
				user.getId()== $user.getId(), 
				alarmType.equals(AlarmType.Antivirus),
				time.isAfter(LocalDateTime.now().minusMonths(6))
			)
		)
	then
		System.out.println("User "+$user.getUsername()+"'s risk has been set to Moderate");
		modify ($user) { setRisk (Risk.Moderate)};
		service.setUserRisk($user);	
end

rule "Detecting moderate risk users - login errors"
	when 
		$user: User(risk.equals(Risk.Low))
		List (size> 15) from collect (
			Log (
				type.equals(LogType.Login),
				status.equals(LogStatus.Error),
				time.isAfter(LocalDateTime.now().minusDays(90))
			)
		)
	then
		System.out.println("User "+$user.getUsername()+"'s risk has been set to Moderate");
		modify ($user) { setRisk (Risk.Moderate)};
		service.setUserRisk($user);	
end

//high risk
rule "Detecting high risk users - any alarm"
	when
		$user: User( 
			!risk.equals(Risk.High) && !risk.equals(Risk.Extreme),
			isAdmin
		)
		exists (
			Alarm (user.getId() == $user.getId())
		)
	then
		System.out.println("User "+$user.getUsername()+"'s risk has been set to High");
		modify ($user) { setRisk (Risk.High)};
		service.setUserRisk($user);
end

rule "Detecting high risk users - login"
	when 
		$user: User(
			!risk.equals(Risk.High) && !risk.equals(Risk.Extreme),
			isAdmin
		)
		$loginLog: Log(
			type.equals(LogType.Login), 
			status.equals(LogStatus.Ok), 
			user.getId() == $user.getId(),
			time.getHour()<8 || time.getHour()>17
		)
		List (size>=2) from collect(
			Log(
				type.equals(LogType.Login),
				status.equals(LogStatus.Error),
				time.isAfter(LocalDateTime.now().minusSeconds(90)),
				user.getId() == $user.getId()
			)
		)
	then
		System.out.println("User "+$user.getUsername()+"'s risk has been set to High");
		modify ($user) { setRisk (Risk.High)};
		service.setUserRisk($user);
end

//extreme risk
rule "Detecting extreme risk users - login and info changed"
	when
		$user: User(!risk.equals(Risk.Extreme))
		exists (
			Alarm (
				alarmType.equals(AlarmType.Antivirus), 
				user.getId() == $user.getId(),
				time.isAfter(LocalDateTime.now().minusMonths(6))
			)
		)
		$loginLog: Log(
			type.equals(LogType.Login), 
			status.equals(LogStatus.Ok), 
			user.getId() == $user.getId()
		)
		$infoChangedLog: Log(
			type.equals(LogType.Information), 
			status.equals(LogStatus.Ok), 
			text.contains("profile info changed"),
			user.getId() == $loginLog.getUser().getId(),
			//ukoliko su podaci mijenjani u periodu od 90 sekundi nakon logovanja
			time.isAfter($loginLog.getTime()) && time.isBefore($loginLog.getTime().plusSeconds(90))
		)
		List (size >=2 ) from collect(
			Log( 
				type.equals(LogType.Login),
				status.equals(LogStatus.Error),
				time.isAfter($loginLog.getTime().minusSeconds(90)) && time.isBefore($loginLog.getTime()),
				user.getId() == $user.getId()
			)
		)
	then
		System.out.println("User "+$user.getUsername()+"'s risk has been set to Extreme");
		modify ($user) { setRisk (Risk.Extreme)};
		service.setUserRisk($user);
end

rule "Detecting extreme risk users - malicious ips"
	when
		$user: User(!risk.equals(Risk.Extreme))
		Log (
			type.equals(LogType.Login),
			machine.getMaliciousIp(),
			user.getId() == $user.getId()
		)
	then
		System.out.println("User "+$user.getUsername()+"'s risk has been set to Extreme");
		modify ($user) { setRisk (Risk.Extreme)};
		service.setUserRisk($user);
end